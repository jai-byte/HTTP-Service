Setting up and Running the Python Script for S3 Bucket Access

1. Environment Setup
Before proceeding, ensure you have the following installed on your system:

Python: Download and install Python 3.x from python.org. During installation, make sure to check the option to add Python to your system PATH.
PIP: Comes bundled with Python, but you can verify installation by running pip --version. If missing, install it by following pip documentation.
#gitbash 
pip install flask boto3

2. Setting AWS Credentials
To access your AWS S3 bucket, you need to set up credentials securely. This can be done using environment variables. Use Git Bash (or any terminal that supports the export command) for this step.
#gitbash
Run the following commands:
export AWS_ACCESS_KEY_ID="your-access-key"
export AWS_SECRET_ACCESS_KEY="your-secret-key"
export AWS_DEFAULT_REGION="your-region"

3. Prepare Your Application
Create Your Script: Save the following code as app.py in your project’s root directory.

Update S3 Bucket Details: Replace your-bucket-name in the script with the name of your S3 bucket.

4. Running the Script
After completing the setup, execute the script using Python:
#gitbash
python app.py
The script will start a Flask server and output an address like:
 * Running on http://127.0.0.1:5000/


For instance, in my setup:

I created a bucket on AWS named "mentasseq".
Set up the environment variables using Git Bash.
Wrote the script app.py and started the server.
The application was available at: http://127.0.0.1:5000/content.
Here’s how my URL looked:
http://127.0.0.1:5000/content
By visiting this link, I accessed my S3 bucket’s top-level structure.


















